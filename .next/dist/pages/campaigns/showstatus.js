"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _Layout = require("../components/Layout");

var _Layout2 = _interopRequireDefault(_Layout);

var _semanticUiReact = require("semantic-ui-react");

var _web = require("../../ethereum/web3");

var _web2 = _interopRequireDefault(_web);

var _vote = require("../../ethereum/vote");

var _vote2 = _interopRequireDefault(_vote);

var _routes = require("../../routes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = "C:\\Users\\eunk\\Desktop\\study\\CleanVote\\pages\\campaigns\\showstatus.js?entry";


var VoteNextShowStatus = function (_Component) {
  (0, _inherits3.default)(VoteNextShowStatus, _Component);

  function VoteNextShowStatus() {
    (0, _classCallCheck3.default)(this, VoteNextShowStatus);

    return (0, _possibleConstructorReturn3.default)(this, (VoteNextShowStatus.__proto__ || (0, _getPrototypeOf2.default)(VoteNextShowStatus)).apply(this, arguments));
  }

  (0, _createClass3.default)(VoteNextShowStatus, [{
    key: "renderRows",

    //-----------------------------------------------------------
    // renderRows 2 - Due to Radio button
    //-----------------------------------------------------------
    value: function renderRows() {
      return this.props.voteStatus.map(function (vote, index) {
        var Row = _semanticUiReact.Table.Row,
            Cell = _semanticUiReact.Table.Cell;

        return _react2.default.createElement(Row, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 36
          }
        }, _react2.default.createElement(Cell, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 37
          }
        }, index + 1), _react2.default.createElement(Cell, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 38
          }
        }, _web2.default.utils.hexToAscii(vote.name)), _react2.default.createElement(Cell, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 39
          }
        }, vote.voteCount));
      });
    }

    //-----------------------------------------------------------
    // render
    //-----------------------------------------------------------

  }, {
    key: "render",
    value: function render() {
      var Header = _semanticUiReact.Table.Header,
          Row = _semanticUiReact.Table.Row,
          HeaderCell = _semanticUiReact.Table.HeaderCell,
          Body = _semanticUiReact.Table.Body;

      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 53
        }
      }, _react2.default.createElement("h1", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 54
        }
      }, "Current Status"), _react2.default.createElement(_semanticUiReact.Form, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 56
        }
      }, _react2.default.createElement(_semanticUiReact.Form.Group, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 57
        }
      }, _react2.default.createElement(_semanticUiReact.Label, { as: "a", color: "orange", image: true, __source: {
          fileName: _jsxFileName,
          lineNumber: 58
        }
      }, _react2.default.createElement("img", { src: "/static/images/small0.jpg", __source: {
          fileName: _jsxFileName,
          lineNumber: 59
        }
      }), "Owner", _react2.default.createElement(_semanticUiReact.Label.Detail, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 61
        }
      }, this.props.owner))), _react2.default.createElement("p", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 65
        }
      }), _react2.default.createElement(_semanticUiReact.Form.Group, { inline: true, __source: {
          fileName: _jsxFileName,
          lineNumber: 66
        }
      }, _react2.default.createElement(_semanticUiReact.Table, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 67
        }
      }, _react2.default.createElement(Header, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 68
        }
      }, _react2.default.createElement(Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 69
        }
      }, _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 70
        }
      }, "ID"), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 71
        }
      }, "Candidate Name"), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 72
        }
      }, "Vote Count"))), _react2.default.createElement(Body, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 75
        }
      }, this.renderRows()))), _react2.default.createElement(_routes.Link, { route: "/", __source: {
          fileName: _jsxFileName,
          lineNumber: 79
        }
      }, _react2.default.createElement(_semanticUiReact.Button, { floated: "right", content: "Home", icon: "home", primary: true, __source: {
          fileName: _jsxFileName,
          lineNumber: 80
        }
      }))));
    }
  }], [{
    key: "getInitialProps",

    //-----------------------------------------------------------
    // getInitialProps - First
    //-----------------------------------------------------------

    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var owner, numberOfVoted, voteStatus;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _vote2.default.methods.owner().call();

              case 2:
                owner = _context.sent;
                _context.next = 5;
                return _vote2.default.methods.getNumberofvotesReceived().call();

              case 5:
                numberOfVoted = _context.sent;
                _context.next = 8;
                return _promise2.default.all(Array(parseInt(numberOfVoted)).fill().map(function (element, index) {
                  return _vote2.default.methods.voteStatus(index).call();
                }));

              case 8:
                voteStatus = _context.sent;
                return _context.abrupt("return", { owner: owner, voteStatus: voteStatus });

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps() {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return VoteNextShowStatus;
}(_react.Component);

exports.default = VoteNextShowStatus;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiVm90ZU5leHRTaG93U3RhdHVzIiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJSb3dzIiwicHJvcHMiLCJ2b3RlU3RhdHVzIiwibWFwIiwidm90ZSIsImluZGV4IiwiUm93IiwiQ2VsbCIsImNyZWF0ZUVsZW1lbnQiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInV0aWxzIiwiaGV4VG9Bc2NpaSIsIm5hbWUiLCJ2b3RlQ291bnQiLCJyZW5kZXIiLCJIZWFkZXIiLCJIZWFkZXJDZWxsIiwiQm9keSIsIkdyb3VwIiwiYXMiLCJjb2xvciIsImltYWdlIiwic3JjIiwiRGV0YWlsIiwib3duZXIiLCJpbmxpbmUiLCJyb3V0ZSIsImZsb2F0ZWQiLCJjb250ZW50IiwiaWNvbiIsInByaW1hcnkiLCJfcmVmIiwibWFyayIsIl9jYWxsZWUiLCJudW1iZXJPZlZvdGVkIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsIm1ldGhvZHMiLCJjYWxsIiwic2VudCIsImdldE51bWJlcm9mdm90ZXNSZWNlaXZlZCIsImFsbCIsIkFycmF5IiwicGFyc2VJbnQiLCJmaWxsIiwiZWxlbWVudCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBTkEsSUFBSUEsZUFBZSxtRkFBbkI7OztBQVFBLElBQUlDLHFCQUFxQixVQUFVQyxVQUFWLEVBQXNCO0FBQzdDLDBCQUFVRCxrQkFBVixFQUE4QkMsVUFBOUI7O0FBRUEsV0FBU0Qsa0JBQVQsR0FBOEI7QUFDNUIsa0NBQWdCLElBQWhCLEVBQXNCQSxrQkFBdEI7O0FBRUEsV0FBTyx5Q0FBMkIsSUFBM0IsRUFBaUMsQ0FBQ0EsbUJBQW1CRSxTQUFuQixJQUFnQyw4QkFBdUJGLGtCQUF2QixDQUFqQyxFQUE2RUcsS0FBN0UsQ0FBbUYsSUFBbkYsRUFBeUZDLFNBQXpGLENBQWpDLENBQVA7QUFDRDs7QUFFRCw2QkFBYUosa0JBQWIsRUFBaUMsQ0FBQztBQUNoQ0ssU0FBSyxZQUQyQjs7QUFJaEM7QUFDQTtBQUNBO0FBQ0FDLFdBQU8sU0FBU0MsVUFBVCxHQUFzQjtBQUMzQixhQUFPLEtBQUtDLEtBQUwsQ0FBV0MsVUFBWCxDQUFzQkMsR0FBdEIsQ0FBMEIsVUFBVUMsSUFBVixFQUFnQkMsS0FBaEIsRUFBdUI7QUFDdEQsWUFBSUMsTUFBTSx1QkFBTUEsR0FBaEI7QUFBQSxZQUNJQyxPQUFPLHVCQUFNQSxJQURqQjs7QUFHQSxlQUFPLGdCQUFNQyxhQUFOLENBQ0xGLEdBREssRUFFTDtBQUNFRyxvQkFBVTtBQUNSQyxzQkFBVWxCLFlBREY7QUFFUm1CLHdCQUFZO0FBRko7QUFEWixTQUZLLEVBUUwsZ0JBQU1ILGFBQU4sQ0FDRUQsSUFERixFQUVFO0FBQ0VFLG9CQUFVO0FBQ1JDLHNCQUFVbEIsWUFERjtBQUVSbUIsd0JBQVk7QUFGSjtBQURaLFNBRkYsRUFRRU4sUUFBUSxDQVJWLENBUkssRUFrQkwsZ0JBQU1HLGFBQU4sQ0FDRUQsSUFERixFQUVFO0FBQ0VFLG9CQUFVO0FBQ1JDLHNCQUFVbEIsWUFERjtBQUVSbUIsd0JBQVk7QUFGSjtBQURaLFNBRkYsRUFRRSxjQUFLQyxLQUFMLENBQVdDLFVBQVgsQ0FBc0JULEtBQUtVLElBQTNCLENBUkYsQ0FsQkssRUE0QkwsZ0JBQU1OLGFBQU4sQ0FDRUQsSUFERixFQUVFO0FBQ0VFLG9CQUFVO0FBQ1JDLHNCQUFVbEIsWUFERjtBQUVSbUIsd0JBQVk7QUFGSjtBQURaLFNBRkYsRUFRRVAsS0FBS1csU0FSUCxDQTVCSyxDQUFQO0FBdUNELE9BM0NNLENBQVA7QUE0Q0Q7O0FBRUQ7QUFDQTtBQUNBOztBQXhEZ0MsR0FBRCxFQTBEOUI7QUFDRGpCLFNBQUssUUFESjtBQUVEQyxXQUFPLFNBQVNpQixNQUFULEdBQWtCO0FBQ3ZCLFVBQUlDLFNBQVMsdUJBQU1BLE1BQW5CO0FBQUEsVUFDSVgsTUFBTSx1QkFBTUEsR0FEaEI7QUFBQSxVQUVJWSxhQUFhLHVCQUFNQSxVQUZ2QjtBQUFBLFVBR0lDLE9BQU8sdUJBQU1BLElBSGpCOztBQU1BLGFBQU8sZ0JBQU1YLGFBQU4sbUJBRUw7QUFDRUMsa0JBQVU7QUFDUkMsb0JBQVVsQixZQURGO0FBRVJtQixzQkFBWTtBQUZKO0FBRFosT0FGSyxFQVFMLGdCQUFNSCxhQUFOLENBQ0UsSUFERixFQUVFO0FBQ0VDLGtCQUFVO0FBQ1JDLG9CQUFVbEIsWUFERjtBQUVSbUIsc0JBQVk7QUFGSjtBQURaLE9BRkYsRUFRRSxnQkFSRixDQVJLLEVBa0JMLGdCQUFNSCxhQUFOLHdCQUVFO0FBQ0VDLGtCQUFVO0FBQ1JDLG9CQUFVbEIsWUFERjtBQUVSbUIsc0JBQVk7QUFGSjtBQURaLE9BRkYsRUFRRSxnQkFBTUgsYUFBTixDQUNFLHNCQUFLWSxLQURQLEVBRUU7QUFDRVgsa0JBQVU7QUFDUkMsb0JBQVVsQixZQURGO0FBRVJtQixzQkFBWTtBQUZKO0FBRFosT0FGRixFQVFFLGdCQUFNSCxhQUFOLHlCQUVFLEVBQUVhLElBQUksR0FBTixFQUFXQyxPQUFPLFFBQWxCLEVBQTRCQyxPQUFPLElBQW5DLEVBQXlDZCxVQUFVO0FBQy9DQyxvQkFBVWxCLFlBRHFDO0FBRS9DbUIsc0JBQVk7QUFGbUM7QUFBbkQsT0FGRixFQU9FLGdCQUFNSCxhQUFOLENBQW9CLEtBQXBCLEVBQTJCLEVBQUVnQixLQUFLLDJCQUFQLEVBQW9DZixVQUFVO0FBQ3JFQyxvQkFBVWxCLFlBRDJEO0FBRXJFbUIsc0JBQVk7QUFGeUQ7QUFBOUMsT0FBM0IsQ0FQRixFQVlFLE9BWkYsRUFhRSxnQkFBTUgsYUFBTixDQUNFLHVCQUFNaUIsTUFEUixFQUVFO0FBQ0VoQixrQkFBVTtBQUNSQyxvQkFBVWxCLFlBREY7QUFFUm1CLHNCQUFZO0FBRko7QUFEWixPQUZGLEVBUUUsS0FBS1YsS0FBTCxDQUFXeUIsS0FSYixDQWJGLENBUkYsQ0FSRixFQXlDRSxnQkFBTWxCLGFBQU4sQ0FBb0IsR0FBcEIsRUFBeUI7QUFDdkJDLGtCQUFVO0FBQ1JDLG9CQUFVbEIsWUFERjtBQUVSbUIsc0JBQVk7QUFGSjtBQURhLE9BQXpCLENBekNGLEVBK0NFLGdCQUFNSCxhQUFOLENBQ0Usc0JBQUtZLEtBRFAsRUFFRSxFQUFFTyxRQUFRLElBQVYsRUFBZ0JsQixVQUFVO0FBQ3RCQyxvQkFBVWxCLFlBRFk7QUFFdEJtQixzQkFBWTtBQUZVO0FBQTFCLE9BRkYsRUFPRSxnQkFBTUgsYUFBTix5QkFFRTtBQUNFQyxrQkFBVTtBQUNSQyxvQkFBVWxCLFlBREY7QUFFUm1CLHNCQUFZO0FBRko7QUFEWixPQUZGLEVBUUUsZ0JBQU1ILGFBQU4sQ0FDRVMsTUFERixFQUVFO0FBQ0VSLGtCQUFVO0FBQ1JDLG9CQUFVbEIsWUFERjtBQUVSbUIsc0JBQVk7QUFGSjtBQURaLE9BRkYsRUFRRSxnQkFBTUgsYUFBTixDQUNFRixHQURGLEVBRUU7QUFDRUcsa0JBQVU7QUFDUkMsb0JBQVVsQixZQURGO0FBRVJtQixzQkFBWTtBQUZKO0FBRFosT0FGRixFQVFFLGdCQUFNSCxhQUFOLENBQ0VVLFVBREYsRUFFRTtBQUNFVCxrQkFBVTtBQUNSQyxvQkFBVWxCLFlBREY7QUFFUm1CLHNCQUFZO0FBRko7QUFEWixPQUZGLEVBUUUsSUFSRixDQVJGLEVBa0JFLGdCQUFNSCxhQUFOLENBQ0VVLFVBREYsRUFFRTtBQUNFVCxrQkFBVTtBQUNSQyxvQkFBVWxCLFlBREY7QUFFUm1CLHNCQUFZO0FBRko7QUFEWixPQUZGLEVBUUUsZ0JBUkYsQ0FsQkYsRUE0QkUsZ0JBQU1ILGFBQU4sQ0FDRVUsVUFERixFQUVFO0FBQ0VULGtCQUFVO0FBQ1JDLG9CQUFVbEIsWUFERjtBQUVSbUIsc0JBQVk7QUFGSjtBQURaLE9BRkYsRUFRRSxZQVJGLENBNUJGLENBUkYsQ0FSRixFQXdERSxnQkFBTUgsYUFBTixDQUNFVyxJQURGLEVBRUU7QUFDRVYsa0JBQVU7QUFDUkMsb0JBQVVsQixZQURGO0FBRVJtQixzQkFBWTtBQUZKO0FBRFosT0FGRixFQVFFLEtBQUtYLFVBQUwsRUFSRixDQXhERixDQVBGLENBL0NGLEVBMEhFLGdCQUFNUSxhQUFOLGVBRUUsRUFBRW9CLE9BQU8sR0FBVCxFQUFjbkIsVUFBVTtBQUNwQkMsb0JBQVVsQixZQURVO0FBRXBCbUIsc0JBQVk7QUFGUTtBQUF4QixPQUZGLEVBT0UsZ0JBQU1ILGFBQU4sMEJBQTRCLEVBQUVxQixTQUFTLE9BQVgsRUFBb0JDLFNBQVMsTUFBN0IsRUFBcUNDLE1BQU0sTUFBM0MsRUFBbURDLFNBQVMsSUFBNUQsRUFBa0V2QixVQUFVO0FBQ3BHQyxvQkFBVWxCLFlBRDBGO0FBRXBHbUIsc0JBQVk7QUFGd0Y7QUFBNUUsT0FBNUIsQ0FQRixDQTFIRixDQWxCSyxDQUFQO0FBMkpEO0FBcEtBLEdBMUQ4QixDQUFqQyxFQStOSSxDQUFDO0FBQ0hiLFNBQUssaUJBREY7O0FBR0g7QUFDQTtBQUNBOztBQUVBQyxXQUFPLFlBQVk7QUFDakIsVUFBSWtDLE9BQU8saUNBQW1CLGFBQWEsc0JBQW9CQyxJQUFwQixDQUF5QixTQUFTQyxPQUFULEdBQW1CO0FBQ3JGLFlBQUlULEtBQUosRUFBV1UsYUFBWCxFQUEwQmxDLFVBQTFCO0FBQ0EsZUFBTyxzQkFBb0JtQyxJQUFwQixDQUF5QixTQUFTQyxRQUFULENBQWtCQyxRQUFsQixFQUE0QjtBQUMxRCxpQkFBTyxDQUFQLEVBQVU7QUFDUixvQkFBUUEsU0FBU0MsSUFBVCxHQUFnQkQsU0FBU0UsSUFBakM7QUFDRSxtQkFBSyxDQUFMO0FBQ0VGLHlCQUFTRSxJQUFULEdBQWdCLENBQWhCO0FBQ0EsdUJBQU8sZUFBS0MsT0FBTCxDQUFhaEIsS0FBYixHQUFxQmlCLElBQXJCLEVBQVA7O0FBRUYsbUJBQUssQ0FBTDtBQUNFakIsd0JBQVFhLFNBQVNLLElBQWpCO0FBQ0FMLHlCQUFTRSxJQUFULEdBQWdCLENBQWhCO0FBQ0EsdUJBQU8sZUFBS0MsT0FBTCxDQUFhRyx3QkFBYixHQUF3Q0YsSUFBeEMsRUFBUDs7QUFFRixtQkFBSyxDQUFMO0FBQ0VQLGdDQUFnQkcsU0FBU0ssSUFBekI7QUFDQUwseUJBQVNFLElBQVQsR0FBZ0IsQ0FBaEI7QUFDQSx1QkFBTyxrQkFBU0ssR0FBVCxDQUFhQyxNQUFNQyxTQUFTWixhQUFULENBQU4sRUFBK0JhLElBQS9CLEdBQXNDOUMsR0FBdEMsQ0FBMEMsVUFBVStDLE9BQVYsRUFBbUI3QyxLQUFuQixFQUEwQjtBQUN0Rix5QkFBTyxlQUFLcUMsT0FBTCxDQUFheEMsVUFBYixDQUF3QkcsS0FBeEIsRUFBK0JzQyxJQUEvQixFQUFQO0FBQ0QsaUJBRm1CLENBQWIsQ0FBUDs7QUFJRixtQkFBSyxDQUFMO0FBQ0V6Qyw2QkFBYXFDLFNBQVNLLElBQXRCO0FBQ0EsdUJBQU9MLFNBQVNZLE1BQVQsQ0FBZ0IsUUFBaEIsRUFBMEIsRUFBRXpCLE9BQU9BLEtBQVQsRUFBZ0J4QixZQUFZQSxVQUE1QixFQUExQixDQUFQOztBQUVGLG1CQUFLLEVBQUw7QUFDQSxtQkFBSyxLQUFMO0FBQ0UsdUJBQU9xQyxTQUFTYSxJQUFULEVBQVA7QUF2Qko7QUF5QkQ7QUFDRixTQTVCTSxFQTRCSmpCLE9BNUJJLEVBNEJLLElBNUJMLENBQVA7QUE2QkQsT0EvQjBDLENBQWhDLENBQVg7O0FBaUNBLGVBQVNrQixlQUFULEdBQTJCO0FBQ3pCLGVBQU9wQixLQUFLckMsS0FBTCxDQUFXLElBQVgsRUFBaUJDLFNBQWpCLENBQVA7QUFDRDs7QUFFRCxhQUFPd0QsZUFBUDtBQUNELEtBdkNNO0FBUEosR0FBRCxDQS9OSjs7QUFnUkEsU0FBTzVELGtCQUFQO0FBQ0QsQ0ExUndCLGtCQUF6Qjs7a0JBNFJlQSxrQiIsImZpbGUiOiJ1bmtub3duIn0=