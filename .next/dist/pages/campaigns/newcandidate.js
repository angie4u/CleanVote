"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _Layout = require("../components/Layout");

var _Layout2 = _interopRequireDefault(_Layout);

var _semanticUiReact = require("semantic-ui-react");

var _web = require("../../ethereum/web3");

var _web2 = _interopRequireDefault(_web);

var _vote = require("../../ethereum/vote");

var _vote2 = _interopRequireDefault(_vote);

var _routes = require("../../routes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = "C:\\Users\\eunk\\Desktop\\study\\CleanVote\\pages\\campaigns\\newcandidate.js?entry";


//---------------------------------------------------------------
// VoteNextNewCandidate
//---------------------------------------------------------------

var VoteNextNewCandidate = function (_Component) {
  (0, _inherits3.default)(VoteNextNewCandidate, _Component);

  function VoteNextNewCandidate() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, VoteNextNewCandidate);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = VoteNextNewCandidate.__proto__ || (0, _getPrototypeOf2.default)(VoteNextNewCandidate)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      value: "",
      candidateName: "",
      candidateAge: "",
      candidateParty: "",
      candidateSlogan: "",
      errorMessage: "",
      loading: false
    }, _this.onSubmit = function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
        var accounts;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                event.preventDefault();

                _this.setState({ loading: true });

                _context.prev = 2;
                _context.next = 5;
                return _web2.default.eth.getAccounts();

              case 5:
                accounts = _context.sent;
                _context.next = 8;
                return _vote2.default.methods.createCandidates(_web2.default.utils.asciiToHex(_this.state.candidateName), _this.state.candidateAge, _web2.default.utils.asciiToHex(_this.state.candidateSlogan), _web2.default.utils.asciiToHex(_this.state.candidateParty)).send({
                  from: accounts[0]
                });

              case 8:

                _routes.Router.pushRoute("/");
                _context.next = 15;
                break;

              case 11:
                _context.prev = 11;
                _context.t0 = _context["catch"](2);

                _this.setState({ errorMessage: _context.t0.message });
                console.log("AAA");

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, _this2, [[2, 11]]);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(VoteNextNewCandidate, [{
    key: "render",
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 51
        }
      }, _react2.default.createElement("h1", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 52
        }
      }, "Create a candidate."), _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 53
        }
      }, _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 54
        }
      }, _react2.default.createElement(_semanticUiReact.Input, {
        icon: "id badge",
        label: "Name",
        placeholder: "David",
        value: this.state.candidateName,
        onChange: function onChange(event) {
          return _this3.setState({ candidateName: event.target.value });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 55
        }
      })), _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 65
        }
      }, _react2.default.createElement(_semanticUiReact.Input, {
        label: "Age",
        icon: "heart",
        placeholder: "45",
        value: this.state.candidateAge,
        onChange: function onChange(event) {
          return _this3.setState({ candidateAge: event.target.value });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 66
        }
      })), _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 76
        }
      }, _react2.default.createElement(_semanticUiReact.Input, {
        icon: "hand peace",
        label: "Slogan",
        placeholder: "More food",
        value: this.state.candidateSlogan,
        onChange: function onChange(event) {
          return _this3.setState({ candidateSlogan: event.target.value });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 77
        }
      })), _react2.default.createElement(_semanticUiReact.Form.Group, { widths: "equal", __source: {
          fileName: _jsxFileName,
          lineNumber: 88
        }
      }, _react2.default.createElement(_semanticUiReact.Form.Field, {
        icon: "users",
        control: "select",
        onChange: function onChange(event) {
          return _this3.setState({ candidateParty: event.target.value });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 89
        }
      }, _react2.default.createElement("option", { value: "The Republican", __source: {
          fileName: _jsxFileName,
          lineNumber: 96
        }
      }, "The Republican"), _react2.default.createElement("option", { value: "The Deplomatic", __source: {
          fileName: _jsxFileName,
          lineNumber: 97
        }
      }, "The Deplomatic"), _react2.default.createElement("option", { value: "The Justice", __source: {
          fileName: _jsxFileName,
          lineNumber: 98
        }
      }, "The Justice"), _react2.default.createElement("option", { value: "The Marvel", __source: {
          fileName: _jsxFileName,
          lineNumber: 99
        }
      }, "The Marvel"))), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: "Opps!", content: this.state.errorMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 103
        }
      }), _react2.default.createElement(_semanticUiReact.Button, {
        type: "submit",
        floated: "right",
        content: "Create",
        icon: "add circle",
        loading: this.state.loading,
        primary: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 104
        }
      })));
    }
  }]);

  return VoteNextNewCandidate;
}(_react.Component);

exports.default = VoteNextNewCandidate;
/*
  onSubmit = async event => {
    event.preventDefault();

    this.setState({ loading: true });

    try {
      const accounts = await web3.eth.getAccounts();
      await vote.methods
        .createCandidates(
          web3.utils.asciiToHex(this.state.candidateName),
          this.state.candidateAge
        )
        .send({
          from: accounts[0]
        });

      Router.pushRoute("/");
    } catch (err) {
      this.setState({ errorMessage: err.message });
    }

    this.setState({ loading: false, errorMessage: "" });
  };
  */
/*
  render() {
    return (
      <Layout>
        <h1>Create a candidate.</h1>
        <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>
          <Form.Field>
            <Input
              size="small"
              icon="tags"
              iconPosition="left"
              labelPosition="right"
              label={{ basic: true, content: "Name" }}
              value={this.state.candidateName}
              onChange={event =>
                this.setState({ candidateName: event.target.value })
              }
            />
          </Form.Field>
          <Form.Field>
            <Input
              size="small"
              icon="tags"
              iconPosition="left"
              labelPosition="right"
              label={{ basic: true, content: "Age" }}
              value={this.state.candidateAge}
              onChange={event =>
                this.setState({ candidateAge: event.target.value })
              }
            />
          </Form.Field>
          <Message error header="Opps!" content={this.state.errorMessage} />
          <Button type="submit" loading={this.state.loading} primary>
            Create
          </Button>
        </Form>
      </Layout>
    );
  }
  */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,